{
	"name": "Dive into Delta Lake Workshop",
	"properties": {
		"folder": {
			"name": "Dive into Delta Lake"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spontespark310",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/305180cd-c5ab-4c0f-b752-c85bdcf5dc88/resourceGroups/rg-sponte-synapse-one-click/providers/Microsoft.Synapse/workspaces/spoexxbkqfmujmvmpocws1/bigDataPools/spontespark310",
				"name": "spontespark310",
				"type": "Spark",
				"endpoint": "https://spoexxbkqfmujmvmpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spontespark310",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dive into Delta Lake Workshop #\r\n",
					"### Spark 3.1.2 | Delta Lake 1.0.0 ###\r\n",
					"\r\n",
					"Reference: https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-3-runtime"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"print(\"spark version: \",spark.version)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql.functions import *"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"taxi_zone_raw = \"abfss://raw@spoexxbkqfmujmvmpoc.dfs.core.windows.net/nyc-tlc/lookup-data/taxi_zone_lookup.csv\"\r\n",
					"taxi_trip_raw_2017 = \"abfss://raw@spoexxbkqfmujmvmpoc.dfs.core.windows.net/nyc-tlc/trip-data/yellow/*_2017-*.csv\"\r\n",
					"taxi_trip_raw_2018 = \"abfss://raw@spoexxbkqfmujmvmpoc.dfs.core.windows.net/nyc-tlc/trip-data/yellow/*_2018-*.csv\"\r\n",
					"taxi_trip_raw_2019 = \"abfss://raw@spoexxbkqfmujmvmpoc.dfs.core.windows.net/nyc-tlc/trip-data/yellow/*_2019-*.csv\"\r\n",
					"taxi_trip_raw_2020 = \"abfss://raw@spoexxbkqfmujmvmpoc.dfs.core.windows.net/nyc-tlc/trip-data/yellow/*_2020-*.csv\"\r\n",
					"\r\n",
					"taxi_zone_delta = \"abfss://delta@spoexxbkqfmujmvmpoc.dfs.core.windows.net/synapse_spark/nyc-tlc/taxi_zone\"\r\n",
					"taxi_trip_delta = \"abfss://delta@spoexxbkqfmujmvmpoc.dfs.core.windows.net/synapse_spark/nyc-tlc/taxi_trip\""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS delta_lake_house\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DROP TABLE IF EXISTS delta_lake_house.stage_taxi_zone"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"taxi_zone_df = (\r\n",
					"    spark.read\r\n",
					"    .option(\"header\",\"true\")\r\n",
					"    .csv(taxi_zone_raw)\r\n",
					")\r\n",
					"\r\n",
					"taxi_zone_df.write.mode(\"overwrite\").saveAsTable(\"delta_lake_house.stage_taxi_zone\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DESCRIBE delta_lake_house.stage_taxi_zone"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DROP TABLE IF EXISTS delta_lake_house.stage_taxi_trip_2017"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"taxi_trip_df = (\r\n",
					"    spark.read\r\n",
					"    .option(\"header\",\"true\")\r\n",
					"    .csv(taxi_trip_raw_2017)\r\n",
					")\r\n",
					"\r\n",
					"taxi_trip_df.write.format(\"parquet\").mode(\"overwrite\").saveAsTable(\"delta_lake_house.stage_taxi_trip_2017\")"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DESCRIBE delta_lake_house.stage_taxi_trip_2017"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": true
				},
				"source": [
					"%%sql\r\n",
					"DROP TABLE IF EXISTS delta_lake_house.taxi_trip"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": true
				},
				"source": [
					"%%sql\r\n",
					"CREATE TABLE delta_lake_house.taxi_trip\r\n",
					"USING delta\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": true
				},
				"source": [
					"%%sql\r\n",
					"MERGE INTO delta_lake_house.ClassEnrollmentDetail\r\n",
					"USING delta_lake_house.Merge_delta\r\n",
					"    ON delta_lake_house.ClassEnrollmentDetail.StudentID = delta_lake_house.Merge_delta.StudentID \r\n",
					"    AND delta_lake_house.ClassEnrollmentDetail.TermID = delta_lake_house.Merge_delta.TermID \r\n",
					"    AND delta_lake_house.ClassEnrollmentDetail.SubjectID = delta_lake_house.Merge_delta.SubjectID \r\n",
					"    AND delta_lake_house.ClassEnrollmentDetail.ClassID = delta_lake_house.Merge_delta.ClassID \r\n",
					"    AND delta_lake_house.ClassEnrollmentDetail.SchoolYear = delta_lake_house.Merge_delta.SchoolYear\r\n",
					"    WHEN MATCHED THEN UPDATE\r\n",
					"        SET delta_lake_house.ClassEnrollmentDetail.LastUpdateDt = delta_lake_house.Merge_delta.LastUpdateDt,\r\n",
					"            delta_lake_house.ClassEnrollmentDetail.City = delta_lake_house.Merge_delta.City\r\n",
					"    WHEN NOT MATCHED THEN \r\n",
					"        INSERT *"
				],
				"execution_count": null
			}
		]
	}
}